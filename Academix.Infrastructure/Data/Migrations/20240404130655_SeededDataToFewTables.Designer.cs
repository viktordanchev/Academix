// <auto-generated />
using System;
using Academix.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Academix.Infrastructure.Migrations
{
    [DbContext(typeof(AcademixDbContext))]
    [Migration("20240404130655_SeededDataToFewTables")]
    partial class SeededDataToFewTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AbsenceType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ExcusedAbsence")
                        .HasColumnType("bit");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Absences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AbsenceType = 0,
                            DateAndTime = new DateTime(2024, 4, 4, 16, 6, 55, 545, DateTimeKind.Local).AddTicks(8896),
                            ExcusedAbsence = false,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            AbsenceType = 0,
                            DateAndTime = new DateTime(2024, 4, 5, 16, 6, 55, 545, DateTimeKind.Local).AddTicks(8926),
                            ExcusedAbsence = false,
                            SubjectId = 1
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a3717562-385e-41ce-9eff-0f1b994e5548",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e84588ab-ef9a-4c44-b394-b06a40e7b88a",
                            Email = "i.ivanov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "I.IVANOV@MAIL.COM",
                            NormalizedUserName = "I.IVANOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL0n61FxxFhM987FuxLbQ5cZ7/FSfPQd/jylbM5ScvYwtVZjYLa1N8ynnSt9SxJeKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ca26553-07e8-4f5c-a411-0a2047818ff6",
                            TwoFactorEnabled = false,
                            UserName = "i.ivanov@mail.com"
                        },
                        new
                        {
                            Id = "1ae342a8-9fab-4c0a-bd5a-70b351717ecc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca41dd34-3147-402f-87e9-ecbb5451ef6b",
                            Email = "m.marinov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Mitko",
                            LastName = "Marinov",
                            LockoutEnabled = false,
                            NormalizedEmail = "M.MARINOV@MAIL.COM",
                            NormalizedUserName = "M.MARINOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBv76VFebsLKsQCGfvus+/HCrc2JS7u3yyxZZxPzUVIshqlbcoRkF1aPMNeO/2rYYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7511cccb-f1cc-496c-92eb-889ba1fe3770",
                            TwoFactorEnabled = false,
                            UserName = "m.marinov@mail.com"
                        },
                        new
                        {
                            Id = "a171483f-6e48-446a-a5d7-36110d0c1443",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e21904bb-20b2-4b03-bf00-338bc290f511",
                            Email = "d.kirilov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Drago",
                            LastName = "Kirilov",
                            LockoutEnabled = false,
                            NormalizedEmail = "D.KIRILOV@MAIL.COM",
                            NormalizedUserName = "D.KIRILOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA0WFMf2B+JIazVy1dDe2S2MoF+uVubiJzm/IOyMSJNrEyTfrzkcIHNqYssCZJOKqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19590556-e170-4fef-a0ba-52ba1b63eee4",
                            TwoFactorEnabled = false,
                            UserName = "d.kirilov@mail.com"
                        },
                        new
                        {
                            Id = "b2502a25-8341-4e5c-af74-cd0f889ede1b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a4e9258-a89e-49a2-9662-098a73363123",
                            Email = "m.kirilova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Marta",
                            LastName = "Kirilova",
                            LockoutEnabled = false,
                            NormalizedEmail = "M.KIRILOVA@MAIL.COM",
                            NormalizedUserName = "M.KIRILOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEETuQ17rUm82JacCGuuQ7B72vClpBO7KDxaAkLsPWdpKkpQZvs7S09ZuAIjihxzR0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e00ad85-3114-4c0a-997b-471834b4c238",
                            TwoFactorEnabled = false,
                            UserName = "m.kirilova@mail.com"
                        },
                        new
                        {
                            Id = "925da918-5cd0-4b17-9b62-2f417aac0343",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e61e0669-1339-4782-952e-00c7d90f466c",
                            Email = "v.marinov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Vasil",
                            LastName = "Marinov",
                            LockoutEnabled = false,
                            NormalizedEmail = "V.MARINOV@MAIL.COM",
                            NormalizedUserName = "V.MARINOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDBSYVXD/hNYsblUT9X+MC/mUSfeWtK4MWJ2RqlxoXCok808UixA8YYBYcL5KTh+qA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba46419d-bc22-4247-9bc8-2d3964d522cb",
                            TwoFactorEnabled = false,
                            UserName = "v.marinov@mail.com"
                        },
                        new
                        {
                            Id = "24a0fdf5-ca4f-4c0f-8120-f6c87448033c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c715aa5-8fa8-4548-863c-6097648e1aac",
                            Email = "v.kirilova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Vanya",
                            LastName = "Kirilova",
                            LockoutEnabled = false,
                            NormalizedEmail = "V.KIRILOVA@MAIL.COM",
                            NormalizedUserName = "V.KIRILOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIe9HCejI1DlEKQIycoPTEkphL5gfxf4VP/c6HvY8UL0yQrtD5TBxJi7CsdJGBzezQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f66efcaf-ec4b-4ac4-aa58-407e758650c1",
                            TwoFactorEnabled = false,
                            UserName = "v.kirilova@mail.com"
                        },
                        new
                        {
                            Id = "5093413e-4acb-471a-9ce7-53df30689fc1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2fde9713-b005-4d74-8b2b-08465dde0930",
                            Email = "n.zakova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Nikoleta",
                            LastName = "Zakova",
                            LockoutEnabled = false,
                            NormalizedEmail = "N.ZAKOVA@MAIL.COM",
                            NormalizedUserName = "N.ZAKOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMWAhWwxnPQGx7ThQgONrW2PFurbjqlWvkNJXl5KKvFOdUP5SYDgQEW5/XWNq1UZdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f989903-40b7-4e03-a3fe-7e776acb2121",
                            TwoFactorEnabled = false,
                            UserName = "n.zakova@mail.com"
                        },
                        new
                        {
                            Id = "6c1ff15b-1853-4d20-98ff-9695affb432c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e145bac6-820b-4528-8cb8-f65991a80bc7",
                            Email = "d.milev@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Dragan",
                            LastName = "Milev",
                            LockoutEnabled = false,
                            NormalizedEmail = "D.MILEV@MAIL.COM",
                            NormalizedUserName = "D.MILEV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBoI7K921oWUSfWXfffFqhgB2xqGZItvJ8f0RXaDzFOO+ztH5Jxmvqk2Zv1ajDL1OA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "70a8d502-2470-4127-b494-ec680049a7c6",
                            TwoFactorEnabled = false,
                            UserName = "d.milev@mail.com"
                        },
                        new
                        {
                            Id = "bd3e68c0-728b-44a0-ba3a-992d8ae683f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61b84308-88d6-4b7f-9bfe-479b7bcddbb1",
                            Email = "z.draganova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Zara",
                            LastName = "Draganova",
                            LockoutEnabled = false,
                            NormalizedEmail = "Z.DRAGANOVA@MAIL.COM",
                            NormalizedUserName = "Z.DRAGANOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGB4PQ8/rxlOvI5wJsOqZWO3ZwINQAhVlVBGtCW1wZ4L0WfQczQ/NSkFRyTCFR+Bbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9249121e-3add-415c-87d1-ac0a09ecf8d7",
                            TwoFactorEnabled = false,
                            UserName = "z.draganova@mail.com"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Burgas"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClassTeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassTeacherId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassTeacherId = 1,
                            Name = "12A"
                        },
                        new
                        {
                            Id = 2,
                            ClassTeacherId = 2,
                            Name = "8B"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DirectorIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorIdentityId");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DirectorIdentityId = "a3717562-385e-41ce-9eff-0f1b994e5548"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradeNumber")
                        .HasColumnType("int");

                    b.Property<int>("GradeType")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAndTime = new DateTime(2024, 4, 4, 16, 6, 55, 556, DateTimeKind.Local).AddTicks(9455),
                            GradeNumber = 4,
                            GradeType = 0,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateAndTime = new DateTime(2024, 4, 16, 16, 6, 55, 556, DateTimeKind.Local).AddTicks(9483),
                            GradeNumber = 6,
                            GradeType = 0,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateAndTime = new DateTime(2024, 4, 15, 16, 6, 55, 556, DateTimeKind.Local).AddTicks(9485),
                            GradeNumber = 6,
                            GradeType = 1,
                            SubjectId = 2
                        },
                        new
                        {
                            Id = 4,
                            DateAndTime = new DateTime(2024, 4, 11, 16, 6, 55, 556, DateTimeKind.Local).AddTicks(9488),
                            GradeNumber = 2,
                            GradeType = 0,
                            SubjectId = 3
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Mapping.SubjectStudent", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("SubjectId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("SubjectsStudents");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            SubjectId = 2,
                            StudentId = 1
                        },
                        new
                        {
                            SubjectId = 3,
                            StudentId = 1
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ParentIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ParentIdentityId");

                    b.ToTable("Parents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ParentIdentityId = "925da918-5cd0-4b17-9b62-2f417aac0343"
                        },
                        new
                        {
                            Id = 2,
                            ParentIdentityId = "24a0fdf5-ca4f-4c0f-8120-f6c87448033c"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DirectorId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            DirectorId = 1,
                            Name = "Vasil Levski"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("NumberInClass")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("StudentIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentIdentityId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Vasil Aprilov 5",
                            ClassId = 1,
                            NumberInClass = 5,
                            ParentId = 1,
                            SchoolId = 1,
                            StudentIdentityId = "1ae342a8-9fab-4c0a-bd5a-70b351717ecc"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Krali Marko 12",
                            ClassId = 2,
                            NumberInClass = 3,
                            ParentId = 2,
                            SchoolId = 1,
                            StudentIdentityId = "a171483f-6e48-446a-a5d7-36110d0c1443"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kalimanci 13",
                            ClassId = 2,
                            NumberInClass = 15,
                            ParentId = 2,
                            SchoolId = 1,
                            StudentIdentityId = "b2502a25-8341-4e5c-af74-cd0f889ede1b"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mathematics",
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Physics",
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "History",
                            TeacherId = 3
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherIdentityId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SchoolId = 1,
                            TeacherIdentityId = "5093413e-4acb-471a-9ce7-53df30689fc1"
                        },
                        new
                        {
                            Id = 2,
                            SchoolId = 1,
                            TeacherIdentityId = "6c1ff15b-1853-4d20-98ff-9695affb432c"
                        },
                        new
                        {
                            Id = 3,
                            SchoolId = 1,
                            TeacherIdentityId = "bd3e68c0-728b-44a0-ba3a-992d8ae683f9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4570b49b-e006-4951-a901-611b50749d6d",
                            ConcurrencyStamp = "e735a2cb-67a2-4fbb-9375-0b008d06b697",
                            Name = "Director",
                            NormalizedName = "DIRECTOR"
                        },
                        new
                        {
                            Id = "2e88e378-eb4d-4c7a-a878-3bce4acdb55b",
                            ConcurrencyStamp = "261e71c6-dfcb-43b0-a2ec-b6e9b4c3e354",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "5a342eda-37cf-43b3-b975-f1e9247a5218",
                            ConcurrencyStamp = "cdcfa9a6-895f-4a02-8a9f-67d967234f5b",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "6503eddd-76d0-4007-a14d-87c2eefa546c",
                            ConcurrencyStamp = "7a52d7e3-8c21-4c18-837f-e34b10522174",
                            Name = "Parent",
                            NormalizedName = "PARENT"
                        },
                        new
                        {
                            Id = "0d1fc518-beb2-444b-bb9f-6964c30d0c0d",
                            ConcurrencyStamp = "83653081-74bf-4ebb-a189-885b5f917f03",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Absence", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Subject", "Subject")
                        .WithMany("Absences")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Class", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Teacher", "ClassTeacher")
                        .WithMany()
                        .HasForeignKey("ClassTeacherId");

                    b.HasOne("Academix.Infrastructure.Data.Models.School", null)
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId");

                    b.Navigation("ClassTeacher");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Director", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "DirectorIdentity")
                        .WithMany()
                        .HasForeignKey("DirectorIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectorIdentity");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Grade", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Subject", "Subject")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Mapping.SubjectStudent", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("SubjectsStudent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Subject", "Subject")
                        .WithMany("SubjectStudents")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Parent", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "ParentIdentity")
                        .WithMany()
                        .HasForeignKey("ParentIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentIdentity");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Request", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Director", "Director")
                        .WithMany("Requests")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.School", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Director", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId");

                    b.HasOne("Academix.Infrastructure.Data.Models.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "StudentIdentity")
                        .WithMany()
                        .HasForeignKey("StudentIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Parent");

                    b.Navigation("School");

                    b.Navigation("StudentIdentity");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Subject", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "TeacherIdentity")
                        .WithMany()
                        .HasForeignKey("TeacherIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("TeacherIdentity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Director", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Parent", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("SubjectsStudent");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Subject", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("Grades");

                    b.Navigation("SubjectStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
