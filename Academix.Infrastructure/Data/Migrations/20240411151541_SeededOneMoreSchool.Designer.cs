// <auto-generated />
using System;
using Academix.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Academix.Infrastructure.Migrations
{
    [DbContext(typeof(AcademixDbContext))]
    [Migration("20240411151541_SeededOneMoreSchool")]
    partial class SeededOneMoreSchool
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AbsenceType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ExcusedAbsence")
                        .HasColumnType("bit");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Absences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AbsenceType = 0,
                            DateAndTime = new DateTime(2024, 4, 11, 18, 15, 40, 725, DateTimeKind.Local).AddTicks(8859),
                            ExcusedAbsence = false,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            AbsenceType = 0,
                            DateAndTime = new DateTime(2024, 4, 12, 18, 15, 40, 725, DateTimeKind.Local).AddTicks(8889),
                            ExcusedAbsence = false,
                            SubjectId = 1
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdminIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AdminIdentityId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminIdentityId = "11f2b8bd-a49a-42cd-b08b-ce067e430965"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a3717562-385e-41ce-9eff-0f1b994e5548",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84b9bd41-5237-476e-88a3-18a72bc43b2f",
                            Email = "i.ivanov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "I.IVANOV@MAIL.COM",
                            NormalizedUserName = "I.IVANOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBgr4kIbOo+uWoQ3FqgCYtjBrjURrRZqxjewg0XxeidwNwZOuAH0Hi0vpgJwJZyG9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d31cceb9-a156-4758-bd2f-36072624e4ad",
                            TwoFactorEnabled = false,
                            UserName = "i.ivanov@mail.com"
                        },
                        new
                        {
                            Id = "1ae342a8-9fab-4c0a-bd5a-70b351717ecc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7042f849-7beb-445f-9a99-474dd60da957",
                            Email = "m.marinov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Mitko",
                            LastName = "Marinov",
                            LockoutEnabled = false,
                            NormalizedEmail = "M.MARINOV@MAIL.COM",
                            NormalizedUserName = "M.MARINOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENn12wylPqTlBIlZ2ERndmZ+x0cBz4Dx9BpO37LBrxpTz+8QUHaokhtix6xuoLrqQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d8afd93-f7b2-4fdd-a018-1b68ed01e25b",
                            TwoFactorEnabled = false,
                            UserName = "m.marinov@mail.com"
                        },
                        new
                        {
                            Id = "a171483f-6e48-446a-a5d7-36110d0c1443",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "179504fa-2599-452b-abfd-c0dec5eb2d7d",
                            Email = "d.kirilov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Drago",
                            LastName = "Kirilov",
                            LockoutEnabled = false,
                            NormalizedEmail = "D.KIRILOV@MAIL.COM",
                            NormalizedUserName = "D.KIRILOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENkU8GDgTK0AHKD2XYXA7quV5SiowiOaXryqOzXGY4CWhzi7LN6+C8/GgPKDFnMyLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a59844c5-b0ba-4709-9c81-e62ed79e4e07",
                            TwoFactorEnabled = false,
                            UserName = "d.kirilov@mail.com"
                        },
                        new
                        {
                            Id = "b2502a25-8341-4e5c-af74-cd0f889ede1b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e822b3f-9e97-4258-9a60-0bc181fbd710",
                            Email = "m.kirilova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Marta",
                            LastName = "Kirilova",
                            LockoutEnabled = false,
                            NormalizedEmail = "M.KIRILOVA@MAIL.COM",
                            NormalizedUserName = "M.KIRILOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEsN3U6chBu8hWUn1SEQpD564fV41MkODPoElE8lhtALmu5xQhO6kVedzKjYY994OQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4632f3a-7418-4d86-ba22-61332683133a",
                            TwoFactorEnabled = false,
                            UserName = "m.kirilova@mail.com"
                        },
                        new
                        {
                            Id = "925da918-5cd0-4b17-9b62-2f417aac0343",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e06eb455-e28a-4390-a2e8-b05b38225ece",
                            Email = "v.marinov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Vasil",
                            LastName = "Marinov",
                            LockoutEnabled = false,
                            NormalizedEmail = "V.MARINOV@MAIL.COM",
                            NormalizedUserName = "V.MARINOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJu451ajaDviOcBfdrs8C/yH5fyRcB5ETNpPEzk/hHXijvO32hfuS834IyKDn8uneQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a17d3a7a-5741-43f7-bc90-cb94a393cd26",
                            TwoFactorEnabled = false,
                            UserName = "v.marinov@mail.com"
                        },
                        new
                        {
                            Id = "24a0fdf5-ca4f-4c0f-8120-f6c87448033c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad784a56-80b8-40d8-915e-0d6153d7c863",
                            Email = "v.kirilova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Vanya",
                            LastName = "Kirilova",
                            LockoutEnabled = false,
                            NormalizedEmail = "V.KIRILOVA@MAIL.COM",
                            NormalizedUserName = "V.KIRILOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJsrOSe4FbypuHmgU+MqkyNE0IRr2exabDUpgA3wikRnEZqtx3buZg4Qh7oaCc4vkQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84f138c1-8af1-4f27-8af8-aa633754cd3d",
                            TwoFactorEnabled = false,
                            UserName = "v.kirilova@mail.com"
                        },
                        new
                        {
                            Id = "5093413e-4acb-471a-9ce7-53df30689fc1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e39c53f-ae6e-4121-b4f2-2502b94211c3",
                            Email = "n.zakova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Nikoleta",
                            LastName = "Zakova",
                            LockoutEnabled = false,
                            NormalizedEmail = "N.ZAKOVA@MAIL.COM",
                            NormalizedUserName = "N.ZAKOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBL+oEeaSyk1wsCPciF0ByigWOUTSBSy8Zh0IGNTfvrlB6e4WwaRGgkyGyql7xFbRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6179f2fd-24da-4811-853b-bbbed45603c6",
                            TwoFactorEnabled = false,
                            UserName = "n.zakova@mail.com"
                        },
                        new
                        {
                            Id = "6c1ff15b-1853-4d20-98ff-9695affb432c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b780875-d3fd-4d2a-bcd5-bf143a3c70ea",
                            Email = "d.milev@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Dragan",
                            LastName = "Milev",
                            LockoutEnabled = false,
                            NormalizedEmail = "D.MILEV@MAIL.COM",
                            NormalizedUserName = "D.MILEV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC7aZzK085TZCZr7GXhuI9Jra9VmOynUIH1P0W0vnO5/3RcvZJuLFvk8nwc6uUtj5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f06d827-e099-42b8-9d58-014f6861b008",
                            TwoFactorEnabled = false,
                            UserName = "d.milev@mail.com"
                        },
                        new
                        {
                            Id = "bd3e68c0-728b-44a0-ba3a-992d8ae683f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "278d228f-a5f9-4528-90b1-d6aa2713238f",
                            Email = "z.draganova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Zara",
                            LastName = "Draganova",
                            LockoutEnabled = false,
                            NormalizedEmail = "Z.DRAGANOVA@MAIL.COM",
                            NormalizedUserName = "Z.DRAGANOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFcT4lOgGuhR5rih+yjWqlKZfij3TmG7N0UNPwq+1Q4CkFSys4v2XsAJ25fhzom1ow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79126071-6db2-4bd4-ba4d-620275ea3d84",
                            TwoFactorEnabled = false,
                            UserName = "z.draganova@mail.com"
                        },
                        new
                        {
                            Id = "11f2b8bd-a49a-42cd-b08b-ce067e430965",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed66220f-80e0-4bcc-aafa-a44481fe2649",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFfidT1yleT1yBy7c1xCxmPHtHW6IFbcNMtI3V0LrGgjmU3kSQPxZNhfxmP2cTloOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "952b56c8-6427-49ba-aa17-881068662f00",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Burgas"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClassTeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassTeacherId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassTeacherId = 1,
                            Name = "12A",
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClassTeacherId = 2,
                            Name = "8B",
                            SchoolId = 1
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DirectorIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorIdentityId");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DirectorIdentityId = "a3717562-385e-41ce-9eff-0f1b994e5548"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradeNumber")
                        .HasColumnType("int");

                    b.Property<int>("GradeType")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAndTime = new DateTime(2024, 4, 11, 18, 15, 40, 737, DateTimeKind.Local).AddTicks(9184),
                            GradeNumber = 4,
                            GradeType = 0,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateAndTime = new DateTime(2024, 4, 23, 18, 15, 40, 737, DateTimeKind.Local).AddTicks(9222),
                            GradeNumber = 6,
                            GradeType = 0,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateAndTime = new DateTime(2024, 4, 22, 18, 15, 40, 737, DateTimeKind.Local).AddTicks(9224),
                            GradeNumber = 6,
                            GradeType = 1,
                            SubjectId = 2
                        },
                        new
                        {
                            Id = 4,
                            DateAndTime = new DateTime(2024, 4, 18, 18, 15, 40, 737, DateTimeKind.Local).AddTicks(9227),
                            GradeNumber = 2,
                            GradeType = 0,
                            SubjectId = 3
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Mapping.SubjectStudent", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("SubjectId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("SubjectsStudents");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            SubjectId = 2,
                            StudentId = 1
                        },
                        new
                        {
                            SubjectId = 3,
                            StudentId = 1
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ParentIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ParentIdentityId");

                    b.ToTable("Parents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ParentIdentityId = "925da918-5cd0-4b17-9b62-2f417aac0343"
                        },
                        new
                        {
                            Id = 2,
                            ParentIdentityId = "24a0fdf5-ca4f-4c0f-8120-f6c87448033c"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("DirectorId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DirectorId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            DirectorId = 1,
                            Name = "Vasil Levski"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Name = "137 Georgi Asparuhov"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberInClass")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ParentId");

                    b.HasIndex("StudentIdentityId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Vasil Aprilov 5",
                            ClassId = 1,
                            NumberInClass = 5,
                            ParentId = 1,
                            StudentIdentityId = "1ae342a8-9fab-4c0a-bd5a-70b351717ecc"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Krali Marko 12",
                            ClassId = 2,
                            NumberInClass = 3,
                            ParentId = 2,
                            StudentIdentityId = "a171483f-6e48-446a-a5d7-36110d0c1443"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kalimanci 13",
                            ClassId = 2,
                            NumberInClass = 15,
                            ParentId = 2,
                            StudentIdentityId = "b2502a25-8341-4e5c-af74-cd0f889ede1b"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mathematics",
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Physics",
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "History",
                            TeacherId = 3
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherIdentityId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SchoolId = 1,
                            TeacherIdentityId = "5093413e-4acb-471a-9ce7-53df30689fc1"
                        },
                        new
                        {
                            Id = 2,
                            SchoolId = 1,
                            TeacherIdentityId = "6c1ff15b-1853-4d20-98ff-9695affb432c"
                        },
                        new
                        {
                            Id = 3,
                            SchoolId = 1,
                            TeacherIdentityId = "bd3e68c0-728b-44a0-ba3a-992d8ae683f9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a550b411-e5c7-407f-aaba-35161bab127e",
                            ConcurrencyStamp = "228f174d-74fe-48a7-aa52-f865a69b2122",
                            Name = "Director",
                            NormalizedName = "DIRECTOR"
                        },
                        new
                        {
                            Id = "f67cd347-818b-4c3e-a1ce-ae76e1a2e31b",
                            ConcurrencyStamp = "160c0784-ee09-457b-b4e5-7ffda3d982b5",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "e67d14b1-de35-47bd-96ac-a70fcc4c25be",
                            ConcurrencyStamp = "9dd264fc-930f-4918-97bc-a797ce78f68d",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "fc1ee3a5-9b29-43ea-b038-2265c1806a75",
                            ConcurrencyStamp = "8d454145-883a-4554-9bcc-ce3af10c4b09",
                            Name = "Parent",
                            NormalizedName = "PARENT"
                        },
                        new
                        {
                            Id = "7f92327f-b1c1-4fd0-b837-afc278f256b2",
                            ConcurrencyStamp = "bfa50196-4651-49f5-bdc2-0b02f64ee068",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a3717562-385e-41ce-9eff-0f1b994e5548",
                            RoleId = "a550b411-e5c7-407f-aaba-35161bab127e"
                        },
                        new
                        {
                            UserId = "5093413e-4acb-471a-9ce7-53df30689fc1",
                            RoleId = "f67cd347-818b-4c3e-a1ce-ae76e1a2e31b"
                        },
                        new
                        {
                            UserId = "6c1ff15b-1853-4d20-98ff-9695affb432c",
                            RoleId = "f67cd347-818b-4c3e-a1ce-ae76e1a2e31b"
                        },
                        new
                        {
                            UserId = "bd3e68c0-728b-44a0-ba3a-992d8ae683f9",
                            RoleId = "f67cd347-818b-4c3e-a1ce-ae76e1a2e31b"
                        },
                        new
                        {
                            UserId = "1ae342a8-9fab-4c0a-bd5a-70b351717ecc",
                            RoleId = "e67d14b1-de35-47bd-96ac-a70fcc4c25be"
                        },
                        new
                        {
                            UserId = "a171483f-6e48-446a-a5d7-36110d0c1443",
                            RoleId = "e67d14b1-de35-47bd-96ac-a70fcc4c25be"
                        },
                        new
                        {
                            UserId = "b2502a25-8341-4e5c-af74-cd0f889ede1b",
                            RoleId = "e67d14b1-de35-47bd-96ac-a70fcc4c25be"
                        },
                        new
                        {
                            UserId = "925da918-5cd0-4b17-9b62-2f417aac0343",
                            RoleId = "fc1ee3a5-9b29-43ea-b038-2265c1806a75"
                        },
                        new
                        {
                            UserId = "24a0fdf5-ca4f-4c0f-8120-f6c87448033c",
                            RoleId = "fc1ee3a5-9b29-43ea-b038-2265c1806a75"
                        },
                        new
                        {
                            UserId = "11f2b8bd-a49a-42cd-b08b-ce067e430965",
                            RoleId = "7f92327f-b1c1-4fd0-b837-afc278f256b2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Absence", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Subject", "Subject")
                        .WithMany("Absences")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Admin", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "AdminIdentity")
                        .WithMany()
                        .HasForeignKey("AdminIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminIdentity");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Class", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Teacher", "ClassTeacher")
                        .WithMany()
                        .HasForeignKey("ClassTeacherId");

                    b.HasOne("Academix.Infrastructure.Data.Models.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassTeacher");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Director", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "DirectorIdentity")
                        .WithMany()
                        .HasForeignKey("DirectorIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectorIdentity");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Grade", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Subject", "Subject")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Mapping.SubjectStudent", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("SubjectsStudent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Subject", "Subject")
                        .WithMany("SubjectStudents")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Parent", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "ParentIdentity")
                        .WithMany()
                        .HasForeignKey("ParentIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentIdentity");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Request", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Admin", "Admin")
                        .WithMany("Requests")
                        .HasForeignKey("AdminId");

                    b.HasOne("Academix.Infrastructure.Data.Models.Director", "Director")
                        .WithMany("Requests")
                        .HasForeignKey("DirectorId");

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Director");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.School", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Director", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId");

                    b.Navigation("City");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId");

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "StudentIdentity")
                        .WithMany()
                        .HasForeignKey("StudentIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Parent");

                    b.Navigation("StudentIdentity");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Subject", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "TeacherIdentity")
                        .WithMany()
                        .HasForeignKey("TeacherIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("TeacherIdentity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Admin", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Director", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Parent", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("SubjectsStudent");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Subject", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("Grades");

                    b.Navigation("SubjectStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
