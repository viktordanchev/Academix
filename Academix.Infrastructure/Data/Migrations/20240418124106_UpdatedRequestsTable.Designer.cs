// <auto-generated />
using System;
using Academix.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Academix.Infrastructure.Migrations
{
    [DbContext(typeof(AcademixDbContext))]
    [Migration("20240418124106_UpdatedRequestsTable")]
    partial class UpdatedRequestsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AbsenceType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ExcusedAbsence")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Absences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AbsenceType = 0,
                            DateAndTime = new DateTime(2024, 4, 18, 15, 41, 6, 152, DateTimeKind.Local).AddTicks(6214),
                            ExcusedAbsence = false,
                            StudentId = 1,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            AbsenceType = 0,
                            DateAndTime = new DateTime(2024, 4, 19, 15, 41, 6, 152, DateTimeKind.Local).AddTicks(6246),
                            ExcusedAbsence = false,
                            StudentId = 1,
                            SubjectId = 1
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a3717562-385e-41ce-9eff-0f1b994e5548",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ffc590f-d6ae-4707-a966-0cc8f0568d8e",
                            Email = "i.ivanov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "I.IVANOV@MAIL.COM",
                            NormalizedUserName = "I.IVANOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEImjKYjVmzdnYUQ2sB0Np4HRRFuE/f/Jef6kfZbgnRxdZG7X/1Igf48SyLkvg8pjCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c0fec67-76d6-4a8b-8610-186cf3c2c2fb",
                            TwoFactorEnabled = false,
                            UserName = "i.ivanov@mail.com"
                        },
                        new
                        {
                            Id = "1ae342a8-9fab-4c0a-bd5a-70b351717ecc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0174fb04-3dcc-4ac6-8ecf-4b4fe9881b19",
                            Email = "m.marinov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Mitko",
                            LastName = "Marinov",
                            LockoutEnabled = false,
                            NormalizedEmail = "M.MARINOV@MAIL.COM",
                            NormalizedUserName = "M.MARINOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBT2MjhJ6bwscJDrZvMQUr6Qa5o/am1Q29MGMaBSjbJKO6jBnEpL2YldhlePovIzaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc6cfeae-4d20-4cce-9d62-45156c91ce0f",
                            TwoFactorEnabled = false,
                            UserName = "m.marinov@mail.com"
                        },
                        new
                        {
                            Id = "a171483f-6e48-446a-a5d7-36110d0c1443",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f3de9f7-169c-4bc6-a42e-4c6a869eb3b1",
                            Email = "d.kirilov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Drago",
                            LastName = "Kirilov",
                            LockoutEnabled = false,
                            NormalizedEmail = "D.KIRILOV@MAIL.COM",
                            NormalizedUserName = "D.KIRILOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI5ggwbZM/wwUwJrHQEIh9E7ZrGQyTk+SgiP0NHKru94ZOJ4d9m4HZG1uJQjJOa1QA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "12295caf-873f-4773-85c1-0a1f2840d3da",
                            TwoFactorEnabled = false,
                            UserName = "d.kirilov@mail.com"
                        },
                        new
                        {
                            Id = "b2502a25-8341-4e5c-af74-cd0f889ede1b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb672eef-e3bf-4250-bf6b-dc1d19909480",
                            Email = "m.kirilova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Marta",
                            LastName = "Kirilova",
                            LockoutEnabled = false,
                            NormalizedEmail = "M.KIRILOVA@MAIL.COM",
                            NormalizedUserName = "M.KIRILOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECYlxfbky5xGZ5AHzwjFUhiv8GPhlq7HvsQLHyKGaw/L5WWkLBYlTUz/vPlJYyOxxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efc4fd95-2651-4873-806f-ff8cab4b749d",
                            TwoFactorEnabled = false,
                            UserName = "m.kirilova@mail.com"
                        },
                        new
                        {
                            Id = "925da918-5cd0-4b17-9b62-2f417aac0343",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34f09d6f-5ed6-46c3-aaee-9523f2c022dc",
                            Email = "v.marinov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Vasil",
                            LastName = "Marinov",
                            LockoutEnabled = false,
                            NormalizedEmail = "V.MARINOV@MAIL.COM",
                            NormalizedUserName = "V.MARINOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL9T8OXewOBlDtKJVYS922Mf49vHF5GHbrmCM+BZzrAa3c1OL+7H7Lq6ArYd1Z0hlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89117fd1-a4eb-4791-88eb-035f2d325050",
                            TwoFactorEnabled = false,
                            UserName = "v.marinov@mail.com"
                        },
                        new
                        {
                            Id = "24a0fdf5-ca4f-4c0f-8120-f6c87448033c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a5bb2c7-9ded-4893-a2ee-55fc881f2801",
                            Email = "v.kirilova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Vanya",
                            LastName = "Kirilova",
                            LockoutEnabled = false,
                            NormalizedEmail = "V.KIRILOVA@MAIL.COM",
                            NormalizedUserName = "V.KIRILOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMGIGUQADcuAcu0c8sGcmdFPS8cK2k7Hcs7LuX/M6IKOC2ZJJ7YbXO+SCYnWmQEpbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac51a037-649e-4554-b09e-6de318a1e532",
                            TwoFactorEnabled = false,
                            UserName = "v.kirilova@mail.com"
                        },
                        new
                        {
                            Id = "5093413e-4acb-471a-9ce7-53df30689fc1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30e5a354-3343-4c0f-afe4-fdc009cf66df",
                            Email = "n.zakova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Nikoleta",
                            LastName = "Zakova",
                            LockoutEnabled = false,
                            NormalizedEmail = "N.ZAKOVA@MAIL.COM",
                            NormalizedUserName = "N.ZAKOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPiAdcLz2hX1fPPkXh0vKXf4edNDDW8fIXzLLcsBx2yVMjK1OseZD+VtUgJZ/ApGXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98d337c5-0b9c-4327-a6a3-c1db077a2b57",
                            TwoFactorEnabled = false,
                            UserName = "n.zakova@mail.com"
                        },
                        new
                        {
                            Id = "6c1ff15b-1853-4d20-98ff-9695affb432c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20762a8b-7e5f-4654-be27-cf5156c10786",
                            Email = "d.milev@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Dragan",
                            LastName = "Milev",
                            LockoutEnabled = false,
                            NormalizedEmail = "D.MILEV@MAIL.COM",
                            NormalizedUserName = "D.MILEV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDOFsWwKD1e9VefNEq/RK2B5CMZ+8srE4AamXgD5jZnTLEnm9PdAOuIiKEe6RdIdkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2579ab93-cfef-48f6-a44a-5578d53c4448",
                            TwoFactorEnabled = false,
                            UserName = "d.milev@mail.com"
                        },
                        new
                        {
                            Id = "bd3e68c0-728b-44a0-ba3a-992d8ae683f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3dfa51a3-5e15-419f-834e-87c39be9881a",
                            Email = "z.draganova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Zara",
                            LastName = "Draganova",
                            LockoutEnabled = false,
                            NormalizedEmail = "Z.DRAGANOVA@MAIL.COM",
                            NormalizedUserName = "Z.DRAGANOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELqQBpODDwyo8t2nkaQm91/PwSLDXwWhxR4WdNvnY6TXnu4A0UJEKziYuYN7uwFnnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a1020b0-fcb6-4e1b-b7b8-9f0058ad368d",
                            TwoFactorEnabled = false,
                            UserName = "z.draganova@mail.com"
                        },
                        new
                        {
                            Id = "11f2b8bd-a49a-42cd-b08b-ce067e430965",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8641f235-1ae8-4805-b863-74ca8fa2bcc2",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDX/rLJZE/BXzZXXZ0d3pfCKy6778B5nVMhueRxo/mzV7DxKUlO4Vpn4+dHMaJYWzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "adebb6fd-b079-4b21-9e7f-2599d2b0459a",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        },
                        new
                        {
                            Id = "214ce248-b8b3-4832-8c3b-7f133e7a429e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f36e4d87-69ba-419b-8911-ea6b3ace1b73",
                            Email = "admin2@mail.com",
                            EmailConfirmed = false,
                            FirstName = "admin2",
                            LastName = "Admin2",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN2@MAIL.COM",
                            NormalizedUserName = "ADMIN2@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELrHblpbjVzJmNYVmG3XEl6sxMHb+ehzUjNTQtfrY1pMPz38G1VVB+EZ7FSlICgYIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ab7f84b-8475-4711-bb72-03f7072696d7",
                            TwoFactorEnabled = false,
                            UserName = "admin2@mail.com"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Burgas"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClassTeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassTeacherId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassTeacherId = 1,
                            Name = "12A",
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClassTeacherId = 2,
                            Name = "8B",
                            SchoolId = 1
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradeNumber")
                        .HasColumnType("int");

                    b.Property<int>("GradeType")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAndTime = new DateTime(2024, 4, 18, 15, 41, 6, 152, DateTimeKind.Local).AddTicks(7170),
                            GradeNumber = 4,
                            GradeType = 0,
                            StudentId = 1,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateAndTime = new DateTime(2024, 4, 30, 15, 41, 6, 152, DateTimeKind.Local).AddTicks(7180),
                            GradeNumber = 6,
                            GradeType = 0,
                            StudentId = 1,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateAndTime = new DateTime(2024, 4, 29, 15, 41, 6, 152, DateTimeKind.Local).AddTicks(7182),
                            GradeNumber = 6,
                            GradeType = 1,
                            StudentId = 1,
                            SubjectId = 2
                        },
                        new
                        {
                            Id = 4,
                            DateAndTime = new DateTime(2024, 4, 25, 15, 41, 6, 152, DateTimeKind.Local).AddTicks(7185),
                            GradeNumber = 2,
                            GradeType = 0,
                            StudentId = 1,
                            SubjectId = 3
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Mapping.RequestReceiver", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RequestId", "ReceiverId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("RequestsReceivers");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Mapping.StudentParent", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId", "ParentId");

                    b.HasIndex("ParentId");

                    b.ToTable("StudentsParents");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            ParentId = "925da918-5cd0-4b17-9b62-2f417aac0343"
                        },
                        new
                        {
                            StudentId = 2,
                            ParentId = "24a0fdf5-ca4f-4c0f-8120-f6c87448033c"
                        },
                        new
                        {
                            StudentId = 3,
                            ParentId = "24a0fdf5-ca4f-4c0f-8120-f6c87448033c"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Mapping.SubjectStudent", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("SubjectId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("SubjectsStudents");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            SubjectId = 2,
                            StudentId = 1
                        },
                        new
                        {
                            SubjectId = 3,
                            StudentId = 1
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("RequesterId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DirectorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DirectorId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            DirectorId = "a3717562-385e-41ce-9eff-0f1b994e5548",
                            Name = "Vasil Levski"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Name = "137 Georgi Asparuhov"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberInClass")
                        .HasColumnType("int");

                    b.Property<string>("StudentIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentIdentityId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Vasil Aprilov 5",
                            ClassId = 1,
                            NumberInClass = 5,
                            StudentIdentityId = "1ae342a8-9fab-4c0a-bd5a-70b351717ecc"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Krali Marko 12",
                            ClassId = 2,
                            NumberInClass = 3,
                            StudentIdentityId = "a171483f-6e48-446a-a5d7-36110d0c1443"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kalimanci 13",
                            ClassId = 2,
                            NumberInClass = 15,
                            StudentIdentityId = "b2502a25-8341-4e5c-af74-cd0f889ede1b"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mathematics",
                            SchoolId = 1,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Physics",
                            SchoolId = 1,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "History",
                            SchoolId = 1,
                            TeacherId = 3
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherIdentityId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SchoolId = 1,
                            TeacherIdentityId = "5093413e-4acb-471a-9ce7-53df30689fc1"
                        },
                        new
                        {
                            Id = 2,
                            SchoolId = 1,
                            TeacherIdentityId = "6c1ff15b-1853-4d20-98ff-9695affb432c"
                        },
                        new
                        {
                            Id = 3,
                            SchoolId = 1,
                            TeacherIdentityId = "bd3e68c0-728b-44a0-ba3a-992d8ae683f9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a550b411-e5c7-407f-aaba-35161bab127e",
                            ConcurrencyStamp = "4e032cc9-c1f9-453f-8d93-3c8f932aab05",
                            Name = "Director",
                            NormalizedName = "DIRECTOR"
                        },
                        new
                        {
                            Id = "f67cd347-818b-4c3e-a1ce-ae76e1a2e31b",
                            ConcurrencyStamp = "6d6dbcc9-f7d6-40df-a321-180d3fbe48ba",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "e67d14b1-de35-47bd-96ac-a70fcc4c25be",
                            ConcurrencyStamp = "0df6cd82-e6e5-4e35-ad67-7e3b6c3479b4",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "fc1ee3a5-9b29-43ea-b038-2265c1806a75",
                            ConcurrencyStamp = "0f6d7c6f-233d-448a-aefd-54108966fc58",
                            Name = "Parent",
                            NormalizedName = "PARENT"
                        },
                        new
                        {
                            Id = "7f92327f-b1c1-4fd0-b837-afc278f256b2",
                            ConcurrencyStamp = "bc3988bc-dfec-4b97-af0e-3521656095d7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a3717562-385e-41ce-9eff-0f1b994e5548",
                            RoleId = "a550b411-e5c7-407f-aaba-35161bab127e"
                        },
                        new
                        {
                            UserId = "5093413e-4acb-471a-9ce7-53df30689fc1",
                            RoleId = "f67cd347-818b-4c3e-a1ce-ae76e1a2e31b"
                        },
                        new
                        {
                            UserId = "6c1ff15b-1853-4d20-98ff-9695affb432c",
                            RoleId = "f67cd347-818b-4c3e-a1ce-ae76e1a2e31b"
                        },
                        new
                        {
                            UserId = "bd3e68c0-728b-44a0-ba3a-992d8ae683f9",
                            RoleId = "f67cd347-818b-4c3e-a1ce-ae76e1a2e31b"
                        },
                        new
                        {
                            UserId = "1ae342a8-9fab-4c0a-bd5a-70b351717ecc",
                            RoleId = "e67d14b1-de35-47bd-96ac-a70fcc4c25be"
                        },
                        new
                        {
                            UserId = "a171483f-6e48-446a-a5d7-36110d0c1443",
                            RoleId = "e67d14b1-de35-47bd-96ac-a70fcc4c25be"
                        },
                        new
                        {
                            UserId = "b2502a25-8341-4e5c-af74-cd0f889ede1b",
                            RoleId = "e67d14b1-de35-47bd-96ac-a70fcc4c25be"
                        },
                        new
                        {
                            UserId = "925da918-5cd0-4b17-9b62-2f417aac0343",
                            RoleId = "fc1ee3a5-9b29-43ea-b038-2265c1806a75"
                        },
                        new
                        {
                            UserId = "24a0fdf5-ca4f-4c0f-8120-f6c87448033c",
                            RoleId = "fc1ee3a5-9b29-43ea-b038-2265c1806a75"
                        },
                        new
                        {
                            UserId = "11f2b8bd-a49a-42cd-b08b-ce067e430965",
                            RoleId = "7f92327f-b1c1-4fd0-b837-afc278f256b2"
                        },
                        new
                        {
                            UserId = "214ce248-b8b3-4832-8c3b-7f133e7a429e",
                            RoleId = "7f92327f-b1c1-4fd0-b837-afc278f256b2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Absence", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Absences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Subject", "Subject")
                        .WithMany("Absences")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Class", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Teacher", "ClassTeacher")
                        .WithMany()
                        .HasForeignKey("ClassTeacherId");

                    b.HasOne("Academix.Infrastructure.Data.Models.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassTeacher");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Grade", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Subject", "Subject")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Mapping.RequestReceiver", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Request", "Request")
                        .WithMany("RequestReceivers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Mapping.StudentParent", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("StudentParents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Mapping.SubjectStudent", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("SubjectsStudent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Subject", "Subject")
                        .WithMany("SubjectStudents")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Request", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Class");

                    b.Navigation("Requester");

                    b.Navigation("School");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.School", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId");

                    b.Navigation("City");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "StudentIdentity")
                        .WithMany()
                        .HasForeignKey("StudentIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("StudentIdentity");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Subject", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.School", "School")
                        .WithMany("Subjects")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "TeacherIdentity")
                        .WithMany()
                        .HasForeignKey("TeacherIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("TeacherIdentity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Request", b =>
                {
                    b.Navigation("RequestReceivers");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Subjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("Grades");

                    b.Navigation("StudentParents");

                    b.Navigation("SubjectsStudent");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Subject", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("Grades");

                    b.Navigation("SubjectStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
