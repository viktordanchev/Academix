// <auto-generated />
using System;
using Academix.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Academix.Infrastructure.Migrations
{
    [DbContext(typeof(AcademixDbContext))]
    [Migration("20240418134732_RemovedMessageColumnFromRequests")]
    partial class RemovedMessageColumnFromRequests
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AbsenceType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ExcusedAbsence")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Absences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AbsenceType = 0,
                            DateAndTime = new DateTime(2024, 4, 18, 16, 47, 32, 203, DateTimeKind.Local).AddTicks(8603),
                            ExcusedAbsence = false,
                            StudentId = 1,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            AbsenceType = 0,
                            DateAndTime = new DateTime(2024, 4, 19, 16, 47, 32, 203, DateTimeKind.Local).AddTicks(8637),
                            ExcusedAbsence = false,
                            StudentId = 1,
                            SubjectId = 1
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a3717562-385e-41ce-9eff-0f1b994e5548",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a78b915-2c32-4a30-baef-838bb32b99ca",
                            Email = "i.ivanov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "I.IVANOV@MAIL.COM",
                            NormalizedUserName = "I.IVANOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA/ZK08UO+/J42nZ9wjgdKa8cTF92O5A4L/GGWCBZj8Xd9ZjZj/QBrAw9GEQrbXemQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df778c75-c4c4-4cf7-98e3-0b38320c686d",
                            TwoFactorEnabled = false,
                            UserName = "i.ivanov@mail.com"
                        },
                        new
                        {
                            Id = "1ae342a8-9fab-4c0a-bd5a-70b351717ecc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6742bb28-57fe-4cb3-a8a1-3a6289d1b8d7",
                            Email = "m.marinov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Mitko",
                            LastName = "Marinov",
                            LockoutEnabled = false,
                            NormalizedEmail = "M.MARINOV@MAIL.COM",
                            NormalizedUserName = "M.MARINOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK9d343oHuVjzUmlmifXCpmPNCsWqqFPNN26/oe+mS4/yvyt25KHKAds/coZxuibcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6675139e-409d-49dc-9b23-dd03fa2572c5",
                            TwoFactorEnabled = false,
                            UserName = "m.marinov@mail.com"
                        },
                        new
                        {
                            Id = "a171483f-6e48-446a-a5d7-36110d0c1443",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d774af22-c8e7-4c1b-814f-94dfdc4e677e",
                            Email = "d.kirilov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Drago",
                            LastName = "Kirilov",
                            LockoutEnabled = false,
                            NormalizedEmail = "D.KIRILOV@MAIL.COM",
                            NormalizedUserName = "D.KIRILOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPZXwFIindiRwFH6YTGRrfquITHRqe+Ho17JwtxNcBhSKQIQBq8nAE5ygOcMG5lmSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9380fe47-921c-4e5a-ad67-462934303951",
                            TwoFactorEnabled = false,
                            UserName = "d.kirilov@mail.com"
                        },
                        new
                        {
                            Id = "b2502a25-8341-4e5c-af74-cd0f889ede1b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "128fe28f-cd6c-4c8c-b4d9-ce3c44b71086",
                            Email = "m.kirilova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Marta",
                            LastName = "Kirilova",
                            LockoutEnabled = false,
                            NormalizedEmail = "M.KIRILOVA@MAIL.COM",
                            NormalizedUserName = "M.KIRILOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHRhzYDLNja0LMNAeLFG+yr+4EOnJ+T/gqC4eHTq6xhJK3Ja/8irwxDuCDJ4IcodsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07b7b638-0417-48dd-97ec-1aea1ace756c",
                            TwoFactorEnabled = false,
                            UserName = "m.kirilova@mail.com"
                        },
                        new
                        {
                            Id = "925da918-5cd0-4b17-9b62-2f417aac0343",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e6e2d05-fdc5-4ae2-8978-9eb57c2d1dd2",
                            Email = "v.marinov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Vasil",
                            LastName = "Marinov",
                            LockoutEnabled = false,
                            NormalizedEmail = "V.MARINOV@MAIL.COM",
                            NormalizedUserName = "V.MARINOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELCBvX+rUQ641sUVJ50DgN+gB2eqlLWqfgMg1g3V5liOyS000e//KxtOy792K9Vhgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e9af2b0f-61e2-458d-89fb-9f21c29b6fd5",
                            TwoFactorEnabled = false,
                            UserName = "v.marinov@mail.com"
                        },
                        new
                        {
                            Id = "24a0fdf5-ca4f-4c0f-8120-f6c87448033c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "361d90a4-6812-4545-8a2e-8ffd1cfcd733",
                            Email = "v.kirilova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Vanya",
                            LastName = "Kirilova",
                            LockoutEnabled = false,
                            NormalizedEmail = "V.KIRILOVA@MAIL.COM",
                            NormalizedUserName = "V.KIRILOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDY6ElTWQ5O+XKp1+S31xBrSn7K8BW+s9QPBAzCeJQAKYSwLb+fDl0tVo0Kd3E2YSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a39de51b-f84d-45a7-b039-2b0d19e10e1c",
                            TwoFactorEnabled = false,
                            UserName = "v.kirilova@mail.com"
                        },
                        new
                        {
                            Id = "5093413e-4acb-471a-9ce7-53df30689fc1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6493a47e-7fb8-42dc-a09e-7f27257d8834",
                            Email = "n.zakova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Nikoleta",
                            LastName = "Zakova",
                            LockoutEnabled = false,
                            NormalizedEmail = "N.ZAKOVA@MAIL.COM",
                            NormalizedUserName = "N.ZAKOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENshs/0AsmO91rAeJdadnqJYaYY+6qAUMrQ+h3ukIFHk0OFxK0oQRHY8kzE2AE51gA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c0781d8e-5785-473e-ad85-ecf5035ae503",
                            TwoFactorEnabled = false,
                            UserName = "n.zakova@mail.com"
                        },
                        new
                        {
                            Id = "6c1ff15b-1853-4d20-98ff-9695affb432c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46aa6c05-97d8-4beb-9782-d650424f9749",
                            Email = "d.milev@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Dragan",
                            LastName = "Milev",
                            LockoutEnabled = false,
                            NormalizedEmail = "D.MILEV@MAIL.COM",
                            NormalizedUserName = "D.MILEV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGiZDFG/0hlsD2fY0n4dT7lKtw2Gb0ykWczKW4KCmFNeWCdn9Od9FQNCbm9Z0Uyjcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "953ef47e-a855-4b5a-a440-e7cbc13df226",
                            TwoFactorEnabled = false,
                            UserName = "d.milev@mail.com"
                        },
                        new
                        {
                            Id = "bd3e68c0-728b-44a0-ba3a-992d8ae683f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01417184-24ce-40bb-99f1-c6ce9b0cd74a",
                            Email = "z.draganova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Zara",
                            LastName = "Draganova",
                            LockoutEnabled = false,
                            NormalizedEmail = "Z.DRAGANOVA@MAIL.COM",
                            NormalizedUserName = "Z.DRAGANOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMoR+9pTWcrT/DKKyHDdJX1FBXanmP1q41MEDebREc438DA3XWuoig4x1OFL7WL9iw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4a5b05f-d21b-43af-8f52-d959fe456fd8",
                            TwoFactorEnabled = false,
                            UserName = "z.draganova@mail.com"
                        },
                        new
                        {
                            Id = "11f2b8bd-a49a-42cd-b08b-ce067e430965",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0997df3f-85d4-4108-838c-389500bd6974",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELKDNpyJ3DhbzNW72j2TYLutXjuSAdGUAqow4WEoPkEAXAUY8pGpira0p2QKbZI4vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d652247-e162-462e-b167-93f64123f81a",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        },
                        new
                        {
                            Id = "214ce248-b8b3-4832-8c3b-7f133e7a429e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "965b19d5-ee87-4203-a757-0be4ba0c9379",
                            Email = "admin2@mail.com",
                            EmailConfirmed = false,
                            FirstName = "admin2",
                            LastName = "Admin2",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN2@MAIL.COM",
                            NormalizedUserName = "ADMIN2@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENViTPYW+Rx1q668XXkqx1PeRROOFlLHyclD3+/E2jX3WZ2/Yz6nljlxqZIja9y+Xw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22cca93b-c65c-4c38-8d1b-c846769d9473",
                            TwoFactorEnabled = false,
                            UserName = "admin2@mail.com"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Burgas"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClassTeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassTeacherId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassTeacherId = 1,
                            Name = "12A",
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClassTeacherId = 2,
                            Name = "8B",
                            SchoolId = 1
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradeNumber")
                        .HasColumnType("int");

                    b.Property<int>("GradeType")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAndTime = new DateTime(2024, 4, 18, 16, 47, 32, 203, DateTimeKind.Local).AddTicks(9605),
                            GradeNumber = 4,
                            GradeType = 0,
                            StudentId = 1,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateAndTime = new DateTime(2024, 4, 30, 16, 47, 32, 203, DateTimeKind.Local).AddTicks(9614),
                            GradeNumber = 6,
                            GradeType = 0,
                            StudentId = 1,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateAndTime = new DateTime(2024, 4, 29, 16, 47, 32, 203, DateTimeKind.Local).AddTicks(9617),
                            GradeNumber = 6,
                            GradeType = 1,
                            StudentId = 1,
                            SubjectId = 2
                        },
                        new
                        {
                            Id = 4,
                            DateAndTime = new DateTime(2024, 4, 25, 16, 47, 32, 203, DateTimeKind.Local).AddTicks(9619),
                            GradeNumber = 2,
                            GradeType = 0,
                            StudentId = 1,
                            SubjectId = 3
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Mapping.RequestReceiver", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RequestId", "ReceiverId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("RequestsReceivers");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Mapping.StudentParent", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId", "ParentId");

                    b.HasIndex("ParentId");

                    b.ToTable("StudentsParents");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            ParentId = "925da918-5cd0-4b17-9b62-2f417aac0343"
                        },
                        new
                        {
                            StudentId = 2,
                            ParentId = "24a0fdf5-ca4f-4c0f-8120-f6c87448033c"
                        },
                        new
                        {
                            StudentId = 3,
                            ParentId = "24a0fdf5-ca4f-4c0f-8120-f6c87448033c"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Mapping.SubjectStudent", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("SubjectId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("SubjectsStudents");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            SubjectId = 2,
                            StudentId = 1
                        },
                        new
                        {
                            SubjectId = 3,
                            StudentId = 1
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("RequesterId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DirectorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DirectorId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            DirectorId = "a3717562-385e-41ce-9eff-0f1b994e5548",
                            Name = "Vasil Levski"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Name = "137 Georgi Asparuhov"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberInClass")
                        .HasColumnType("int");

                    b.Property<string>("StudentIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentIdentityId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Vasil Aprilov 5",
                            ClassId = 1,
                            NumberInClass = 5,
                            StudentIdentityId = "1ae342a8-9fab-4c0a-bd5a-70b351717ecc"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Krali Marko 12",
                            ClassId = 2,
                            NumberInClass = 3,
                            StudentIdentityId = "a171483f-6e48-446a-a5d7-36110d0c1443"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kalimanci 13",
                            ClassId = 2,
                            NumberInClass = 15,
                            StudentIdentityId = "b2502a25-8341-4e5c-af74-cd0f889ede1b"
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mathematics",
                            SchoolId = 1,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Physics",
                            SchoolId = 1,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "History",
                            SchoolId = 1,
                            TeacherId = 3
                        });
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherIdentityId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SchoolId = 1,
                            TeacherIdentityId = "5093413e-4acb-471a-9ce7-53df30689fc1"
                        },
                        new
                        {
                            Id = 2,
                            SchoolId = 1,
                            TeacherIdentityId = "6c1ff15b-1853-4d20-98ff-9695affb432c"
                        },
                        new
                        {
                            Id = 3,
                            SchoolId = 1,
                            TeacherIdentityId = "bd3e68c0-728b-44a0-ba3a-992d8ae683f9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a550b411-e5c7-407f-aaba-35161bab127e",
                            ConcurrencyStamp = "1701c802-86c2-4fd5-a3a5-a78b431b766c",
                            Name = "Director",
                            NormalizedName = "DIRECTOR"
                        },
                        new
                        {
                            Id = "f67cd347-818b-4c3e-a1ce-ae76e1a2e31b",
                            ConcurrencyStamp = "7d066ce7-15dc-4e91-a6d9-3f65f9af6a05",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "e67d14b1-de35-47bd-96ac-a70fcc4c25be",
                            ConcurrencyStamp = "fa28b43b-7d70-4830-816d-2653129f4511",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "fc1ee3a5-9b29-43ea-b038-2265c1806a75",
                            ConcurrencyStamp = "5dae3ad9-93dd-4f70-8ee3-099f01fb6e36",
                            Name = "Parent",
                            NormalizedName = "PARENT"
                        },
                        new
                        {
                            Id = "7f92327f-b1c1-4fd0-b837-afc278f256b2",
                            ConcurrencyStamp = "d71189c6-592d-42de-907e-b9c19d966abb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a3717562-385e-41ce-9eff-0f1b994e5548",
                            RoleId = "a550b411-e5c7-407f-aaba-35161bab127e"
                        },
                        new
                        {
                            UserId = "5093413e-4acb-471a-9ce7-53df30689fc1",
                            RoleId = "f67cd347-818b-4c3e-a1ce-ae76e1a2e31b"
                        },
                        new
                        {
                            UserId = "6c1ff15b-1853-4d20-98ff-9695affb432c",
                            RoleId = "f67cd347-818b-4c3e-a1ce-ae76e1a2e31b"
                        },
                        new
                        {
                            UserId = "bd3e68c0-728b-44a0-ba3a-992d8ae683f9",
                            RoleId = "f67cd347-818b-4c3e-a1ce-ae76e1a2e31b"
                        },
                        new
                        {
                            UserId = "1ae342a8-9fab-4c0a-bd5a-70b351717ecc",
                            RoleId = "e67d14b1-de35-47bd-96ac-a70fcc4c25be"
                        },
                        new
                        {
                            UserId = "a171483f-6e48-446a-a5d7-36110d0c1443",
                            RoleId = "e67d14b1-de35-47bd-96ac-a70fcc4c25be"
                        },
                        new
                        {
                            UserId = "b2502a25-8341-4e5c-af74-cd0f889ede1b",
                            RoleId = "e67d14b1-de35-47bd-96ac-a70fcc4c25be"
                        },
                        new
                        {
                            UserId = "925da918-5cd0-4b17-9b62-2f417aac0343",
                            RoleId = "fc1ee3a5-9b29-43ea-b038-2265c1806a75"
                        },
                        new
                        {
                            UserId = "24a0fdf5-ca4f-4c0f-8120-f6c87448033c",
                            RoleId = "fc1ee3a5-9b29-43ea-b038-2265c1806a75"
                        },
                        new
                        {
                            UserId = "11f2b8bd-a49a-42cd-b08b-ce067e430965",
                            RoleId = "7f92327f-b1c1-4fd0-b837-afc278f256b2"
                        },
                        new
                        {
                            UserId = "214ce248-b8b3-4832-8c3b-7f133e7a429e",
                            RoleId = "7f92327f-b1c1-4fd0-b837-afc278f256b2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Absence", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Absences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Subject", "Subject")
                        .WithMany("Absences")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Class", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Teacher", "ClassTeacher")
                        .WithMany()
                        .HasForeignKey("ClassTeacherId");

                    b.HasOne("Academix.Infrastructure.Data.Models.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassTeacher");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Grade", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Subject", "Subject")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Mapping.RequestReceiver", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Request", "Request")
                        .WithMany("RequestReceivers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Mapping.StudentParent", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("StudentParents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Mapping.SubjectStudent", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("SubjectsStudent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Subject", "Subject")
                        .WithMany("SubjectStudents")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Request", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Class");

                    b.Navigation("Requester");

                    b.Navigation("School");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.School", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId");

                    b.Navigation("City");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "StudentIdentity")
                        .WithMany()
                        .HasForeignKey("StudentIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("StudentIdentity");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Subject", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.School", "School")
                        .WithMany("Subjects")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", "TeacherIdentity")
                        .WithMany()
                        .HasForeignKey("TeacherIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("TeacherIdentity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Academix.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Request", b =>
                {
                    b.Navigation("RequestReceivers");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Subjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("Grades");

                    b.Navigation("StudentParents");

                    b.Navigation("SubjectsStudent");
                });

            modelBuilder.Entity("Academix.Infrastructure.Data.Models.Subject", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("Grades");

                    b.Navigation("SubjectStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
